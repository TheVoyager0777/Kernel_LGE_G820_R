/*
 * LP5521 LED chip driver.
 *
 * Copyright (C) 2010 Nokia Corporation
 *
 * Contact: Samu Onkalo <samu.p.onkalo@nokia.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 */

#ifndef __LINUX_LP5521_H
#define __LINUX_LP5521_H

/* See Documentation/leds/leds-lp5521.txt */

struct lp5521_led_config {
	char		*name;
	u8		chan_nr;
	u8		led_current; /* mA x10, 0 if led is not connected */
	u8		max_current;
};

struct lp5521_led_pattern {
	const u8 *r;
	const u8 *g;
	const u8 *b;
	u8 size_r;
	u8 size_g;
	u8 size_b;
};

struct lp5521_engine {
	int		id;
	u8		mode;
	u8		prog_page;
	u8		engine_mask;
};

struct lp5521_led {
	int			id;
	u8			chan_nr;
	u8			led_current;
	u8			max_current;
	struct led_classdev	cdev;
	struct work_struct	brightness_work;
	u8			brightness;
};

#define LP5521_CLOCK_AUTO	0
#define LP5521_CLOCK_INT	1
#define LP5521_CLOCK_EXT	2

/* Bits in CONFIG register */
#define LP5521_PWM_HF			0x40	/* PWM: 0 = 256Hz, 1 = 558Hz */
#define LP5521_PWRSAVE_EN		0x20	/* 1 = Power save mode */
#define LP5521_CP_MODE_OFF		0	/* Charge pump (CP) off */
#define LP5521_CP_MODE_BYPASS		8	/* CP forced to bypass mode */
#define LP5521_CP_MODE_1X5		0x10	/* CP forced to 1.5x mode */
#define LP5521_CP_MODE_AUTO		0x18	/* Automatic mode selection */
#define LP5521_R_TO_BATT		4	/* R out: 0 = CP, 1 = Vbat */
#define LP5521_CLK_SRC_EXT		0	/* Ext-clk source (CLK_32K) */
#define LP5521_CLK_INT			1	/* Internal clock */
#define LP5521_CLK_AUTO			2	/* Automatic clock selection */

struct lp5521_platform_data {
	struct lp5521_led_config *led_config;
	u8	num_channels;
	u8	clock_mode;
	void	(*release_resources)(void);
	void	(*enable)(bool state);
	const char *label;
	u8	update_config;
	struct lp5521_led_pattern *patterns;
	int num_patterns;
};

#define LP5521_MAX_LEDS			3	/* Maximum number of LEDs */
#define LP5521_MAX_ENGINES		3	/* Maximum number of engines */
#define LP5521_PROGRAM_LENGTH		32	/* in bytes */

struct lp5521_pattern_cmd {
	u8 r[LP5521_PROGRAM_LENGTH];
	u8 g[LP5521_PROGRAM_LENGTH];
	u8 b[LP5521_PROGRAM_LENGTH];
	unsigned int pc_r;
	unsigned int pc_g;
	unsigned int pc_b;
};

struct lp5521_chip {
	struct lp5521_platform_data *pdata;
	struct mutex		lock; /* Serialize control */
	struct i2c_client	*client;
	struct lp5521_engine	engines[LP5521_MAX_ENGINES];
	struct lp5521_led	leds[LP5521_MAX_LEDS];
	struct class		*cover_led_class;
	struct lp5521_pattern_cmd blink_cmd;
	u8			blink_flag;
	u8			num_channels;
	u8			num_leds;
	int id_pattern_play;
	u8 current_index;
	unsigned int rgb_led_en;
	bool force_led_mode;
#if defined(CONFIG_MSM8909_CF) || defined(CONFIG_MSM8909_M1) || defined(CONFIG_MSM8909_CF2)
	struct notifier_block fb_notifier_block;
#endif
};

#define LP5521_INFO_PRINT   	(1)


#if defined(LP5521_INFO_PRINT)
#define LP5521_INFO_MSG(fmt, args...) \
		printk(KERN_INFO "[LP5521] " fmt, ##args);
#define LP5521_ERR_MSG(fmt, args...) \
		printk(KERN_ERR "[LP5521][E] " fmt, ##args);

#else
#define LP5521_INFO_MSG(fmt, args...)     {};
#endif

/*[pattern_id : 1, Power On_Animation]*/
static const u8 mode1_red[] = {};
static const u8 mode1_green[] = {0x40, 0xff, 0x60, 0x00, 0x14, 0xc7, 0x0a, 0xda, 0x0a, 0xdb, 0x7f, 0x00, 0x53, 0x00, 0xe0, 0x08, 0x08, 0x6c, 0x0f, 0x4f, 0x0f, 0xcf, 0x08, 0xec, 0xa0, 0x17};
static const u8 mode1_blue[] = {0x40, 0x00, 0x60, 0x00, 0x06, 0x7f, 0x06, 0x7e, 0x07, 0xff, 0x07, 0xfe, 0x7f, 0x00, 0x53, 0x00, 0xe1, 0x00, 0x53, 0x00, 0x06, 0x7e, 0x05, 0x7f, 0x05, 0xff, 0x06, 0xfe, 0xa0, 0x17};

/*[pattern_id : 2, Not used, LCD On]*/
static const u8 mode2_red[]={0x40, 0xff, 0x4d, 0x00, 0x0a, 0xff, 0x0a, 0xfe, 0xc0, 0x00};
static const u8 mode2_green[]={0x40, 0xff, 0x4d, 0x00, 0x0a, 0xff, 0x0a, 0xfe, 0xc0, 0x00};
static const u8 mode2_blue[]={0x40, 0xff, 0x4d, 0x00, 0x0a, 0xff, 0x0a, 0xfe, 0xc0, 0x00};

/*[pattern_id : 3, Charging]*/
static const u8 mode3_red[] = {0x40, 0x19, 0x39, 0x19, 0x1B, 0x0E, 0x0C, 0x75, 0x11, 0x41, 0x43, 0x04, 0x48, 0x09, 0x15, 0xC6, 0x0C, 0xF5, 0x1B, 0x8E, 0x39, 0x99, 0x4C, 0x00};

/*[pattern_id : 4, Charging Full]*/
static const u8 mode4_green[]={0x40, 0x19, 0x40, 0xE6, 0x7A, 0x00};

/*[pattern_id : 5, Calendar Remind & Missed Noti one-shot(green)]*/
static const u8 mode5_red[]={};
static const u8 mode5_green[]={0x40, 0x00, 0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0xC0, 0x00};
static const u8 mode5_blue[]={};

/*[pattern_id : 6, Power Off]*/
static const u8 mode6_red[] = {};
static const u8 mode6_green[] = {0x0C, 0x2F, 0xE0, 0x08, 0x07, 0x49, 0x08, 0x1E, 0x0B, 0xAB, 0x14, 0x0B, 0x3D, 0x83, 0x3D, 0x03, 0x14, 0x8B, 0x0B, 0xAB, 0x08, 0x9E, 0x07, 0xC9, 0xE2, 0x00, 0x05, 0xAF, 0xA2, 0x90};
static const u8 mode6_blue[] = {0xE1, 0x00, 0x40, 0x00, 0x10, 0x0E, 0x08, 0x1D, 0x07, 0x21, 0x04, 0x36, 0x04, 0x3A, 0x05, 0x33, 0x05, 0xB3, 0x04, 0xBA, 0x04, 0xB6, 0x07, 0xA1, 0x08, 0x9D, 0x10, 0x8E, 0xE0, 0x04};

/*[pattern_id : 7, Missed Noti Repeat(green)]*/
static const u8 mode7_red[]={};
static const u8 mode7_green[]={0x40, 0x00, 0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x7D, 0x00, 0xA5, 0x9A, 0x47, 0x00, 0xA0, 0x91};
static const u8 mode7_blue[]={};

/*[pattern_id : 14, Missed Noti(favorite)]*/
static const u8 mode14_red[]={0x40, 0x00, 0x10, 0xFE, 0x40, 0xFF, 0x4F, 0x00, 0x05, 0xE5, 0xE0, 0x0C, 0x05, 0xE5, 0xE0, 0x0C, 0x40, 0xFF, 0x4F, 0x00, 0x04, 0xFF, 0xE0, 0x0C, 0x04, 0xFE, 0xE0, 0x0C, 0x1A, 0xFE};
static const u8 mode14_green[]={0x40, 0x00, 0x10, 0xFE, 0x40, 0x66, 0x4F, 0x00, 0x0B, 0xA8, 0xE0, 0x80, 0x0B, 0xA8, 0xE0, 0x80, 0x40, 0x66, 0x4F, 0x00, 0x09, 0xB2, 0xE0, 0x80, 0x09, 0xB2, 0xE0, 0x80, 0x1A, 0xFE};
static const u8 mode14_blue[]={0x40, 0x00, 0x10, 0xFE, 0x40, 0x73, 0x4F, 0x00, 0x08, 0xBC, 0xE0, 0x80, 0x0F, 0x9E, 0xE0, 0x80, 0x40, 0x73, 0x4F, 0x00, 0x05, 0xD5, 0xE0, 0x80, 0x10, 0x9C, 0xE0, 0x80, 0x1A, 0xFE};

/*[pattern_id : 15, power off Charging100, brightness 50%]*/
#if 1 /*pattern 1 and off time 5sec*/
static const u8 mode15_green_50[]={0x40, 0x00, 0x3f, 0x19, 0x23, 0x33, 0x24, 0x32, 0x66, 0x00, 0x24, 0xb2, 0x23, 0xb3, 0x3f, 0x99, 0x7f, 0x00, 0xa2, 0x98};
#else /*pattern 1 and off time 10sec*/
static const u8 mode15_green_50[]={0x40, 0x00, 0x3f, 0x19, 0x23, 0x33, 0x24, 0x32, 0x66, 0x00, 0x24, 0xb2, 0x23, 0xb3, 0x3f, 0x99, 0x7f, 0x00, 0xa5, 0x18};
#endif

/*[pattern_id : 16, power off Charging0_99, brightness 50%]*/
static const u8 mode16_red_50[]={0x40, 0x0d, 0x44, 0x0c, 0x23, 0x33, 0x24, 0x32, 0x66, 0x00, 0x24, 0xb2, 0x23, 0xb3, 0x44, 0x8c};

/*[pattern_id : 17, Missed Noti Repeat(pink)]*/
static const u8 mode17_red[]={0xE0, 0x0C, 0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x7D, 0x00, 0xA5, 0x8A, 0x47, 0x00};
static const u8 mode17_green[]={0xE0, 0x80, 0x40, 0x41, 0x33, 0x81, 0x03, 0xBE, 0x4D, 0x00, 0x40, 0x41, 0x29, 0x81, 0x03, 0xBE, 0x7D, 0x00, 0xA5, 0x98, 0x47, 0x00};
static const u8 mode17_blue[]={0xE0, 0x80, 0x40, 0x41, 0x33, 0x81, 0x03, 0xBE, 0x4D, 0x00, 0x40, 0x41, 0x29, 0x81, 0x03, 0xBE, 0x7D, 0x00, 0xA5, 0xA8, 0x47, 0x00};

/*[pattern_id : 18, Missed Noti Repeat(blue)*/
static const u8 mode18_red[]={};
static const u8 mode18_green[]={0xE2, 0x00, 0x40, 0x4D, 0x33, 0x81, 0x03, 0xCA, 0x4D, 0x00, 0x40, 0x4D, 0x29, 0x81, 0x03, 0xCA, 0x7D, 0x00, 0xA5, 0x98, 0x47, 0x00};
static const u8 mode18_blue[]={0xE0, 0x04, 0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x7D, 0x00, 0xA5, 0xAA, 0x47, 0x00};

/*[pattern_id : 19, Missed Noti Repeat(orange)]*/
static const u8 mode19_red[]={0xE0, 0x04, 0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x7D, 0x00, 0xA5, 0x8A, 0x47, 0x00};
static const u8 mode19_green[]={0xE0, 0x80, 0x40, 0x66, 0x33, 0x81, 0x02, 0xE3, 0x4D, 0x00, 0x40, 0x66, 0x29, 0x81, 0x02, 0xE3, 0x7D, 0x00, 0xA5, 0x98, 0x47, 0x00};
static const u8 mode19_blue[]={};

/*[pattern_id : 20, Missed Noti Repeat(yellow)]*/
static const u8 mode20_red[]={0xE0, 0x04, 0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x7D, 0x00, 0xA5, 0x8A, 0x47, 0x00};
static const u8 mode20_green[]={0xE0, 0x80, 0x40, 0xE6, 0x14, 0x84, 0x01, 0xF0, 0x01, 0xEF, 0x4D, 0x00, 0x40, 0xE6, 0x10, 0x84, 0x01, 0xF0, 0x01, 0xEF, 0x7D, 0x00, 0xA5, 0x9A, 0x47, 0x00};
static const u8 mode20_blue[]={};

/*[pattern_id : 29, Missed Noti Repeat(turquoise)]*/
static const u8 mode29_red[]={};
static const u8 mode29_green[]={0xE0, 0x08, 0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x7D, 0x00, 0xA5, 0x9A, 0x47, 0x00};
static const u8 mode29_blue[]={0xE1, 0x00, 0x40, 0x7A, 0x22, 0x82, 0x02, 0xF6, 0x4D, 0x00, 0x40, 0x7A, 0x1B, 0x82, 0x02, 0xF6, 0x7D, 0x00, 0xA5, 0xA8, 0x47, 0x00};

/*[pattern_id : 30, Missed Noti Repeat(purple)]*/
static const u8 mode30_red[]={0xE2, 0x00, 0x40, 0xAF, 0x1A, 0x83, 0x01, 0xD5, 0x01, 0xD4, 0x4D, 0x00, 0x40, 0xAF, 0x14, 0x83, 0x01, 0xD5, 0x01, 0xD4, 0x7D, 0x00, 0xA5, 0x8A, 0x47, 0x00};
static const u8 mode30_green[]={0xE2, 0x00, 0x40, 0x19, 0x33, 0x81, 0x09, 0x96, 0x4D, 0x00, 0x40, 0x19, 0x29, 0x81, 0x09, 0x96, 0x7D, 0x00, 0xA5, 0x98, 0x47, 0x00};
static const u8 mode30_blue[]={0xE0, 0x06, 0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x7D, 0x00, 0xA5, 0xAA, 0x47, 0x00};

/*[pattern_id : 31, Missed Noti Repeat(red)]*/
static const u8 mode31_red[]={0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x7D, 0x00, 0xA5, 0x89, 0x47, 0x00};
static const u8 mode31_green[]={};
static const u8 mode31_blue[]={};

/*[pattern_id : 32, Missed Noti Repeat(lime)]*/
static const u8 mode32_red[]={0xE0, 0x04, 0x40, 0x87, 0x22, 0x82, 0x02, 0xC1, 0x02, 0xC1, 0x4D, 0x00, 0x40, 0x87, 0x1B, 0x82, 0x02, 0xC1, 0x02, 0xC1, 0x7D, 0x00, 0xA5, 0x8A, 0x47, 0x00};
static const u8 mode32_green[]={0xE0, 0x80, 0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x7D, 0x00, 0xA5, 0x9A, 0x47, 0x00};
static const u8 mode32_blue[]={};

/*[pattern_id : 35, In call]*/
static const u8 mode35_red[] = {0xE0, 0x0C, 0x40, 0x00, 0x1B, 0x0E, 0x0A, 0x53, 0x08, 0x68, 0x10, 0x32, 0x73, 0x00, 0x10, 0xB2, 0x08, 0xE8, 0x0A, 0xD3, 0x1B, 0x8E, 0x60, 0x00, 0x60, 0x00};
static const u8 mode35_green[] = {0xE0, 0x80, 0x40, 0x00, 0x43, 0x03, 0x27, 0x14, 0x1E, 0x1A, 0x3F, 0x0C, 0x73, 0x00, 0x3F, 0x8C, 0x1E, 0x9A, 0x27, 0x94, 0x43, 0x83, 0x60, 0x00, 0x60, 0x00};
static const u8 mode35_blue[] = {0xE0, 0x80, 0x40, 0x00, 0x43, 0x03, 0x27, 0x14, 0x1E, 0x1A, 0x3F, 0x0C, 0x73, 0x00, 0x3F, 0x8C, 0x1E, 0x9A, 0x27, 0x94, 0x43, 0x83, 0x60, 0x00, 0x60, 0x00};

/*[pattern_id : 37, ID_URGENT_CALL_MISSED_NOTI]*/
static const u8 mode37_red[]={0x40, 0x00, 0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x44, 0x00, 0xA1, 0x01, 0x7D, 0x00, 0xA5, 0x87, 0x29, 0x00, 0xA0, 0x80};
static const u8 mode37_green[]={};
static const u8 mode37_blue[]={};

/*[pattern_id : 40, Missed Noti one-shot(pink)]*/
static const u8 mode40_red[]={0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0xC0, 0x00};
static const u8 mode40_green[]={0x40, 0x41, 0x33, 0x81, 0x03, 0xBE, 0x4D, 0x00, 0x40, 0x41, 0x29, 0x81, 0x03, 0xBE, 0xC0, 0x00};
static const u8 mode40_blue[]={0x40, 0x41, 0x33, 0x81, 0x03, 0xBE, 0x4D, 0x00, 0x40, 0x41, 0x29, 0x81, 0x03, 0xBE, 0xC0, 0x00};

/*[pattern_id : 41, Missed Noti one-shot(blue)*/
static const u8 mode41_red[]={};
static const u8 mode41_green[]={0x40, 0x4D, 0x33, 0x81, 0x03, 0xCA, 0x4D, 0x00, 0x40, 0x4D, 0x29, 0x81, 0x03, 0xCA, 0xC0, 0x00};
static const u8 mode41_blue[]={0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0xC0, 0x00};

/*[pattern_id : 42, Missed Noti one-shot(orange)]*/
static const u8 mode42_red[]={0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0xC0, 0x00};
static const u8 mode42_green[]={0x40, 0x66, 0x33, 0x81, 0x02, 0xE3, 0x4D, 0x00, 0x40, 0x66, 0x29, 0x81, 0x02, 0xE3, 0xC0, 0x00};
static const u8 mode42_blue[]={};

/*[pattern_id : 43, Missed Noti one-shot(yellow)]*/
static const u8 mode43_red[]={0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0xC0, 0x00};
static const u8 mode43_green[]={0x40, 0xE6, 0x14, 0x84, 0x01, 0xF0, 0x01, 0xEF, 0x4D, 0x00, 0x40, 0xE6, 0x10, 0x84, 0x01, 0xF0, 0x01, 0xEF, 0xC0, 0x00};
static const u8 mode43_blue[]={};

/*[pattern_id : 44, Missed Noti one-shot(turquoise)]*/
static const u8 mode44_red[]={};
static const u8 mode44_green[]={0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0xC0, 0x00};
static const u8 mode44_blue[]={0x40, 0x7A, 0x22, 0x82, 0x02, 0xF6, 0x4D, 0x00, 0x40, 0x7A, 0x1B, 0x82, 0x02, 0xF6, 0xC0, 0x00};

/*[pattern_id : 45, Missed Noti one-shot(purple)]*/
static const u8 mode45_red[]={0x40, 0xAF, 0x1A, 0x83, 0x01, 0xD5, 0x01, 0xD4, 0x4D, 0x00, 0x40, 0xAF, 0x1A, 0x83, 0x01, 0xD5, 0x01, 0xD4, 0xC0, 0x00};
static const u8 mode45_green[]={0x40, 0x19, 0x33, 0x81, 0x09, 0x96, 0x4D, 0x00, 0x40, 0x19, 0x29, 0x81, 0x09, 0x96, 0xC0, 0x00};
static const u8 mode45_blue[]={0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0xC0, 0x00};

/*[pattern_id : 46, Missed Noti one-shot(red)]*/
static const u8 mode46_red[]={0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0xC0, 0x00};
static const u8 mode46_green[]={};
static const u8 mode46_blue[]={};

/*[pattern_id : 47, Missed Noti one-shot(lime)]*/
static const u8 mode47_red[]={0x40, 0x87, 0x22, 0x82, 0x02, 0xC1, 0x02, 0xC1, 0x4D, 0x00, 0x40, 0x87, 0x1B, 0x82, 0x02, 0xC1, 0x02, 0xC1, 0xC0, 0x00};
static const u8 mode47_green[]={0x40, 0xFF, 0x14, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0x4D, 0x00, 0x40, 0xFF, 0x10, 0x84, 0x01, 0xFC, 0x01, 0xFC, 0xC0, 0x00};
static const u8 mode47_blue[]={};

/*[pattern_id : 105, Bluetooth on]*/
static const u8 mode50_red[]={};
static const u8 mode50_green[]={0x40, 0x4D, 0x60, 0x00, 0x08, 0x98, 0x06, 0xA2, 0x0C, 0x90, 0xC0, 0x00};
static const u8 mode50_blue[]={0x40, 0xFF, 0x60, 0x00, 0x02, 0xD1, 0x02, 0xF1, 0x03, 0xBA, 0xC0, 0x00};

/*[pattern_id : 106, Bluetooth off]*/
static const u8 mode51_red[]={0x4D, 0x00, 0x40, 0xFF, 0x02, 0xBE, 0x01, 0xF8, 0x01, 0xC6, 0x40, 0xFF, 0x29, 0x00, 0x03, 0xBE, 0x01, 0xF8, 0x02, 0xC6, 0xC0, 0x00};
static const u8 mode51_green[]={};
static const u8 mode51_blue[]={};

#if defined(CONFIG_MACH_MSM8974_G3_LGU) || defined(CONFIG_MACH_MSM8974_G3_SKT) || defined(CONFIG_MACH_MSM8974_G3_KT) || defined(CONFIG_MACH_MSM8974_G3_ATT) || defined(CONFIG_MACH_MSM8974_G3_VZW) || defined(CONFIG_MACH_MSM8974_G3_SPR_US) || defined(CONFIG_MACH_MSM8974_G3_USC_US) || defined(CONFIG_MACH_MSM8974_G3_ACG_US) || defined(CONFIG_MACH_MSM8974_G3_TMO_US) || defined(CONFIG_MACH_MSM8974_G3_GLOBAL_COM) || defined(CONFIG_MACH_MSM8974_G3_CN) || defined(CONFIG_MACH_MSM8974_G3_CA) || defined(CONFIG_MACH_MSM8974_G3_LRA)
static const u8 current_index_mapped_value[256] = {
	7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,   // 14
	7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,   // 29
	8,  8,  8,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10,   // 44
	11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13,  // 59
	14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 19,  // 74
	18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 22, 22, 23, 23, 24,  // 89
	24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31,  // 104
	31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38,  // 119
	39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 45, 46, 47, 48,  // 134
	49, 50, 51, 52, 52, 53, 54, 55, 56, 57, 58, 59, 60, 60, 61,  // 149
	61, 62, 62, 63, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,  // 164
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,  // 179
	88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,  // 194
	103,104,105,106,107,108,109,111,112,113,114,115,116,117,118, // 209
	119,121,123,124,126,127,128,129,130,131,132,133,134,135,136, // 224
	138,140,142,143,144,146,148,150,151,152,154,155,157,158,159, // 239
	160,161,162,163,164,165,166,167,168,169,170,172,174,176,178, // 254
	180
};
#elif defined(CONFIG_MACH_MSM8974_B1_KR) || defined(CONFIG_MACH_MSM8974_B1W)

static const u8 current_index_mapped_value[256] = {
	7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,   // 14
	7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,   // 29
	8,  8,  8,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10,   // 44
	11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13,  // 59
	14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 19,  // 74
	18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 22, 22, 23, 23, 24,  // 89
	24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31,  // 104
	31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38,  // 119
	39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 45, 46, 47, 48,  // 134
	49, 50, 51, 52, 52, 53, 54, 55, 56, 57, 58, 59, 60, 60, 61,  // 149
	61, 62, 62, 63, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,  // 164
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,  // 179
	88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,  // 194
	103,104,105,106,107,108,109,111,112,113,114,115,116,117,118, // 209
	119,121,123,124,126,127,128,129,130,131,132,133,134,135,136, // 224
	138,140,142,143,144,146,148,150,151,152,154,155,157,158,159, // 239
	160,161,162,163,164,165,166,167,168,169,170,172,174,176,178, // 254
	180
};
#else
/* for current tunning */
static const u8 current_index_mapped_value[256] = {
	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,  // 14
	15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,  // 29
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,  // 44
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,    // 59
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,  // 74
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,  // 89
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104,  // 104
	105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,  // 119
	120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,  // 134
	135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,  // 149
	150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,  // 164
	165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,  // 179
	180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,   // 194
	195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,   // 209
	210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,   // 224
	225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,   // 239
	240,241,242,243,244,245,246,247,248,249,220,251,252,253,254,   // 254
	255
};
#endif

#endif /* __LINUX_LP5521_H */
